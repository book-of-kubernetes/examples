---
- name: ssh key directory
  ansible.builtin.file:
    path: "{{ role_path }}/../../../sshkeys"
    state: directory
    mode: '0700'

- name: ssh key
  community.crypto.openssh_keypair:
    path: "{{ role_path }}/../../../sshkeys/id_rsa_aws_ansible_k8s"
    comment: "aws_ansible_k8s_key"
    regenerate: full_idempotence
  register: aws_ssh_key

- name: aws key
  amazon.aws.ec2_key:
    name: "{{ aws_key }}"
    key_material: "{{ aws_ssh_key['public_key'] }}"

- name: vpc
  amazon.aws.ec2_vpc_net:
    name: ansible_k8s
    region: "{{ aws_region }}"
    cidr_block: "{{ aws_private_cidr }}"
  register: aws_vpc_output

- name: subnet
  amazon.aws.ec2_vpc_subnet:
    region: "{{ aws_region }}"
    az: "{{ aws_subnet_az }}"
    vpc_id: "{{ aws_vpc_output['vpc']['id'] }}"
    cidr: "{{ aws_private_cidr }}"
  register: aws_subnet_output

- name: internet gateway
  community.aws.ec2_vpc_igw:
    vpc_id: "{{ aws_vpc_output['vpc']['id'] }}"
    region: "{{ aws_region }}"
    state: present
  register: aws_igw_output

- name: public route
  community.aws.ec2_vpc_route_table:
    vpc_id: "{{ aws_vpc_output['vpc']['id'] }}"
    region: "{{ aws_region }}"
    tags:
      Name: Public
    subnets:
      - "{{ aws_subnet_output['subnet']['id'] }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ aws_igw_output['gateway_id'] }}"

- name: security group
  amazon.aws.ec2_group:
    name: ansible_k8s
    description: "Ansible K8S Security Group"
    region: "{{ aws_region }}"
    vpc_id: "{{ aws_vpc_output['vpc']['id'] }}"
    rules:
      - proto: tcp
        ports:
        - 22
        cidr_ip: 0.0.0.0/0
        rule_desc: allow incoming ssh
      - proto: tcp
        ports:
        - 80
        - 3000
        - 5000
        - 9090
        cidr_ip: 0.0.0.0/0
        rule_desc: allow incoming http for todo, grafana, and prometheus
      - proto: all
        cidr_ip: "{{ aws_private_cidr }}"
        rule_desc: allow all private traffic
      - proto: all
        cidr_ip: "{{ aws_k8s_pod_cidr }}"
        rule_desc: allow k8s pod traffic
      - proto: all
        cidr_ip: "{{ aws_k8s_svc_cidr }}"
        rule_desc: allow k8s service traffic
  register: aws_sg_output

- name: find ami
  amazon.aws.ec2_ami_info:
    region: '{{ aws_region }}'
    owners: "{{ aws_ubuntu_owner }}"
    filters:
      name: "{{ aws_ubuntu_image }}"
  register: ec2_ami_facts_result

- name: instances
  community.aws.ec2_instance:
    region: "{{ aws_region }}"
    name: "{{ item.key }}"
    key_name: "{{ aws_key }}"
    instance_type: "{{ item.value.instance_type }}"
    image_id: "{{ ec2_ami_facts_result['images'][0]['image_id'] }}"
    wait: yes
    wait_timeout: 30
    vpc_subnet_id: "{{ aws_subnet_output['subnet']['id'] }}"
    security_group: "{{ aws_sg_output['group_id'] }}"
    network:
      assign_public_ip: yes
      private_ip_address: "{{ item.value.ip }}"
      source_dest_check: no
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 24
    tags:
      env: aws_ansible_k8s
      type: "{{ item.value.type }}"
    user_data: |
      #!/bin/sh
      hostnamectl set-hostname {{ item.key }}
  with_dict: "{{ aws_instances }}"
  register: aws_ec2_instance_output

- name: collect host data
  ansible.builtin.set_fact:
    aws_ec2_instance_data: "{{ aws_ec2_instance_output | json_query('results[].instances[0].[tags.Name, public_ip_address, instance_id]') }}"

- name: collect lb targets
  ansible.builtin.set_fact:
    aws_lb_tgt: "{{ aws_lb_tgt|default([]) + [{'Id': item.value.ip}] }}"
  when: 
    - item.value.type == 'master'
    - aws_lb is defined
  with_dict: "{{ aws_instances }}"

- name: target groups
  community.aws.elb_target_group:
    name: "ansible-k8s-{{ item.name }}"
    protocol: tcp
    port: "{{ item.source }}"
    vpc_id: "{{ aws_vpc_output['vpc']['id'] }}"
    target_type: ip
    targets: "{{ aws_lb_tgt | map('combine', {'Port': item.target}) }}"
    state: present
  with_list: "{{ aws_lb.ports }}"
  when: aws_lb is defined

- name: collect lb listeners
  ansible.builtin.set_fact:
    aws_lb_listeners: "{{ aws_lb_listeners|default([]) + [{'Protocol': 'TCP', 'Port': item.source, 'DefaultActions': [{'Type': 'forward', 'TargetGroupName': 'ansible-k8s-'+item.name}]}] }}"
  with_list: "{{ aws_lb.ports }}"
  when: aws_lb is defined

- name: load balancer
  community.aws.elb_network_lb:
    region: "{{ aws_region }}"
    name: ansible-k8s
    scheme: internal
    subnet_mappings:
      - SubnetId: "{{ aws_subnet_output['subnet']['id'] }}"
        PrivateIPv4Address: "{{ aws_lb.ip }}"
    listeners: "{{ aws_lb_listeners }}"
    state: present
  when: aws_lb is defined

- name: fetch host keys
  ansible.builtin.shell: aws ec2 get-console-output --region {{ aws_region }} --instance-id {{ item[2] }} --output text|sed -n 's/ecdsa-sha2-nistp256 \([^ ]*\).*/\1/p'
  register: aws_ec2_host_keys
  until: aws_ec2_host_keys.stdout|length
  delay: 30
  retries: 30
  with_list: "{{ aws_ec2_instance_data }}"
  changed_when: false

- name: store host keys
  ansible.builtin.known_hosts:
    name: "{{ item[0] }}"
    key: "{{ item[0] }} ecdsa-sha2-nistp256 {{ item[1] }}"
    path: "{{ role_path }}/../../../sshkeys/known_hosts_aws_ansible_k8s"
  with_list: "{{ aws_ec2_host_keys | json_query('results[].[item[1], stdout]') }}"

- name: ssh script
  ansible.builtin.template:
    src: aws-ssh.sh.j2
    dest: "{{ playbook_dir }}/aws-ssh.sh"
    mode: '0755'
